{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fswiss\fcharset0 Arial-BoldMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red24\green25\blue27;
\red255\green255\blue255;\red38\green38\blue38;\red52\green52\blue52;\red246\green246\blue246;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\cssrgb\c12549\c12941\c14118;
\cssrgb\c100000\c100000\c100000;\cssrgb\c20000\c20000\c20000;\cssrgb\c26667\c26667\c26667;\cssrgb\c97255\c97255\c97255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab593
\pard\tx220\tx720\pardeftab593\li720\fi-720\sl336\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0
\f0\fs28 \cf2 \cb3 {\listtext	\uc0\u9642 	} What each is (reference and value type)?\
\pard\tx593\pardeftab593\sl336\slmult1\pardirnatural\partightenfactor0
\cf2         \cf4 \cb5 \expnd0\expndtw0\kerning0
In Swift there are two categories of types: value types and reference types. A value type instance keeps a unique copy of its data, for example, a struct or an enum . A reference type, shares a single copy of its data, and the type is \cf4 usually a class \cf4 \
\
\pard\tx220\tx720\pardeftab593\li720\fi-720\sl336\slmult1\pardirnatural\partightenfactor0
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
  \cf2 \cb3 \kerning1\expnd0\expndtw0 how are they different ?\cf4 \cb5 \expnd0\expndtw0\kerning0
\
\pard\tx593\pardeftab593\sl336\slmult1\pardirnatural\partightenfactor0
\cf4 \cb1        A Value Type holds the data within its own memory allocation and a Reference Type contains a pointer to another memory location that holds the real data\cf2 \cb3 \kerning1\expnd0\expndtw0 \
\
\pard\tx220\tx720\pardeftab593\li720\fi-720\sl336\slmult1\pardirnatural\partightenfactor0
\ls3\ilvl0\cf2 {\listtext	\uc0\u9642 	}pros and cons to either ?\
\pard\pardeftab720\sl336\slmult1\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf6 \cb5 \expnd0\expndtw0\kerning0
                 When to Use Value Types:
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cb1 \
\cf7 \cb5    Use value types when comparing instance data with \AppleTypeServices \cb8 ==\AppleTypeServices\AppleTypeServicesF65539 \cb5  makes sense.\cb1  \AppleTypeServices \cb8 ==\AppleTypeServices\AppleTypeServicesF65539 \cb5  checks if every property of the two instances is the same.\cb1 \uc0\u8232 \cb5    With value types you always get a unique, copied instance, and you can be sure that no other part of your app is changing the data under the hood. This is especially helpful in multi-threaded environments where a different thread        \
   \cf7 could alter your data.\cf7 \cb1 \
\cb5    Use a value type when you want copies to have an independent state, and the data will be used in code across multiple threads.\cb1 \
\cb5    In Swift, \AppleTypeServices \cb8 Array\AppleTypeServices\AppleTypeServicesF65539 \cb5 , \AppleTypeServices \cb8 String\AppleTypeServices\AppleTypeServicesF65539 \cb5 , and \AppleTypeServices \cb8 Dictionary\AppleTypeServices\AppleTypeServicesF65539 \cb5  are all value types.\
\cb1 \

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf6 \cb5                   When to Use Reference Types
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 :\cb1 \
\cf7 \cb5    In Swift, reference type instances share a single copy of their data, so that every new instance will point to the same address in memory. A typical example is a \AppleTypeServices \cb8 class\AppleTypeServices\AppleTypeServicesF65539 \cb5 , \AppleTypeServices \cb8 function\AppleTypeServices\AppleTypeServicesF65539 \cb5 , or \AppleTypeServices \cb8 closure\AppleTypeServices\AppleTypeServicesF65539 \cb5 .\AppleTypeServices \cf2 \cb3 \kerning1\expnd0\expndtw0 \
}